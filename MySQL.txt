SET SESSION TRANSACTION ISOLATION LEVE ~ 
1.READ UNCOMMITTED
2.READ COMMITTED
3.REPEATEABLE READ
4.SERIALIZABLE

SHOW TABLE STATUS LIKE '' /G

MyISAM 
数据文件MYD，索引文件MYI
平台通用,
动态行和静态行，大小只受限于磁盘空间大小
加锁与并发， 并发插入,表级别的加锁
自动修复
手工修复
支持全文索引
延迟更新索引

InnoDB
专为支持事物处理，大量短期事物（Short-lived）
使用MVCC支持高并发性能（MultiVersion Concurrency Control）
基于聚簇索引，尽量吧主键定义的小，不会压缩索引
外键约束，可预测性的预读Predictive read-ahead，支持数据预先提取Prefetching，
hash索引，插入缓冲区，快速插入

Memory
内存表，速度快，易丢失
支持hash索引，快速查找
不支持TEXT，BLOG，只支持固定大小行，Varchar存储为Char

Archive
只支持Insert和Select查询，不支持索引，缓冲了数据写操作，
适合于数据记录和数据采集的应用，
适合复制服务器上的快速数据插入
支持行级加锁和专用的缓冲区系统

CVS

Federated
不再本地存储，远程MySQL服务器上的表

Blackhole
没有存储机制，假想复制设置，日记保留休息，审查日记记录

NDB
集群引擎，支持冗余和负载均衡特性
基于无共享概念
数据节点，管理节点和SQL节点
不容节点上系统保留一份数据的多份拷贝
管理节点获取集中式配置，以及监控，控制所有集群节点，所有节点彼此同性

Falcon，

solidDB
支持悲观并发控制和乐观并发控制

PBXT
使用事务日志和数据文件来避免预写日志，减少事务开销

Maria
取代MyISAM
1.每张表支持事务性存储和非事务性存储两种选项
2.在运行非事务性模式下，也能进行崩溃后的恢复
3.行级锁和支持MVCC
4.更好的BOLG数据处理

事务 InnoDB
并发 MyISAM
备份 奔溃后恢复

尽量避免NULL
难以优化可空列的查询
需要特殊处理

DATETIME,TIMESTAMP,DATE,YEAR

整数
TINYINT, SMALLINT,MEDIUMINT,INT,BIGINT, 8，16，24，32，64 / -2^(n-1) ~ 2^(N-1)-1

实数
Decimal 精确计算，服务器上进行计算，cpu不支持
Decimal最多65个数字，早期版本中254位，计算中专为Decimal
Float和Double近似计算，cpu上直接计算，会快一点
Float4字节，Double8字节
只有对小数精确计算时才使用Decimal，比如金融数据

字符串，每个字符串列都有自己的字符集和排序规则，这会极大影响性能
varchar使用额外的1到2字节存储长度
varchar长度增加具体行为和存储引擎有关，MyISAM会将行拆开，
InnoDB可能进行分页，当最大长度远大于平均长度，并且更新较少是，使用varchar
保留末尾空格

CHAR，适合存储密码的MD5值，经常改变的列，去掉末尾的空格

数据如何保存取决于存储引擎，Memory存储引擎使用了固定长度，而Falcon引擎使用了可变长度
但是截取和填充空格的行为在各个存储引擎之间是一样的，因为这是MySQL服务器自身的行为

BINARY和VARBINARY
BLOG TEXT分别以二进制和字符串形式保留大量数据
只按max_sort_length规定的前若干个字节进行排序
不能索引这些数据的长度，也不能为排序使用索引
Memory不支持BLOG和TEXT， 实际使用MyISAM，引起性能开销

ENUM可以存储65535个不同的字符串

BIT
SET 

索引
B-Tree索引
MyISAM使用前缀压缩（Prefix Compression）以减小索引
InnoDB不会压缩索引，因为它不能把压缩索引用于某些优化
MyISAM按照存储的物理位置引用被索引的行
InnoDB按照主键值引用行

B-Tree按顺序保存了索引的列

最左原则
不能跳过索引中的列
不能优化任何在第一个范围条件右边的列

列顺序几段重要
对于高性能应用程序，也许要针对不同的顺序创建多个索引，以满足程序的需要

哈希索引
它吧哈希吗保存在索引中，并且保存了一个指向哈希表中每一个行的指针
只有Memory存储索引支持显示地哈希索引
只包含哈希码和行指针，而不是值自身
不能进行排序
hash索引不支持部分匹配
只支持= IN <=>,不能加快范围查询
InnoDB 自适应哈希索引 
当InnoDB注意到一些索引值被很频繁地访问的时候，它就会为B-Tree的顶端为这些值建立起内存的索引
避免hash碰撞

空间索引R-Tree 
全文索引

数据布局
MyISAM按照插入的顺序把值保存在磁盘上

InnoDB支持聚集索引
聚集索引中的每个叶子节点上都包含主键值，事务，ID，用于事务和MVCC的回滚指针及剩下的列
使用行的主键值作为指针使得索引变得更大，意味着InnoDB可以移动行，而无需更新指针
使用InnoDB的时候要以主键的顺序插入数据，并且使用单调增的主键来插入新行

MyISAM只在MySQL的内存中缓存引擎

聚集的数据优点：
可以把相关的数据保存在一起。
数据访问快。聚集索引吧索引和数据都保存在同一颗树B-Tree中，因此从聚集索引中过去的数据比非聚集快
使用覆盖索引的查询可以使用包含在叶子节点中的主键值

聚集能最大限度提升IO密集负载的性能
插入速度眼中依赖插入顺序，否则需要OPTIMIZE TABLE
跟新聚集索引列是昂贵的，它强制InnoDB吧每个更新的行列移到新的位置
建立在聚集索引上的表插入新行或者主键被更新，改行必须被移动的时候会进行分页
聚集表可能会比全变扫描


索引不能覆盖查询
选择了所有的列，没有索引覆盖所有列
MySQL不能在索引中前缀匹配的LIKE 