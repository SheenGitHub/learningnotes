常见的并发危险：竞争条件（race condition）
2.3 惰性初始化中存在竞争条件
命中计数操作中存在“读改写”操作，要确保在更新的过程中，没有其他线程改变或使用计数器
UnsafeSequence 用于持久性框架生成实体标识符，两个对象会由于相同的ID而消亡，因为它们破坏了标识符的完整性约束
为了保护状态的一致性，要在单一的院子操作中更新相互关联的状态变量

在单个线程中只要重排序不会对结果产生影响，那就不能保证其中的操作一定按照程序写定的顺序执行，
即使重排序对其他线程来说会产生明显的影响。

局部变量（Local variables） 方法定义参数（formal method parameters）和 异常处理参数（exception handler parameters）
不会砸线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响
JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存，每个线程都有一个私有的本地内存（Local memeory）,
本地内存存储了该线程读写共享变量的副本

重排序

1.编译器优化的重排序
编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序
2指令级并行的重排序。现代处理器采用指令级并行技术(Instruction-Level Parallelism,ILP)，将多条指令重叠执行，
如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序
3.内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是乱序执行的
源代码---》1.---》2----》3---》最终执行的指令序列

线程安全容器
Hashtable , synchronizedMap, ConcurrentMap
Vector, CopyOnWriteArrayList, CopyOnWriteArraySet, synchronizedList, synchronizedSet
BlockingQueue, ConcurrentLinkedQueue
Future, Exchanger
最简单最安全的方式发布--静态初始化器
public static Holder holder = new Holder(42);

独占(Exclusion) 状态依赖(State dependence) 创建线程(Creating thread)

synchronized加锁规则
*永远只是在更新对象的成员变量时加锁
*永远只是在访问有可能被更新的成员函数时才加锁
*永远不要在调用其他对象的方法时加锁

未经检查的异常RuntimeException,Error 导致线程的run方法结束，这个线程被终止。
重复调用start方法，会得到一个InvalidThradStateException

isAlive()
isInterrupted() 被t.interrupt中断的interruption状态被置位false。
新线程的优先级与创建它的那个线程的优先级一致
t.join()会在t.isAlive()为false时返回，将当前线程挂起，知道目标线程t结束运行


Object类的每一个实例在进入一个同步快方法前加锁，并在离开时释放锁
最常用的是this，意味着锁住当前正在执行的方法所属的对象
当一个线程持有一把锁后，其他线程必须阻塞，等待这个线程释放这把锁，加锁对非同步方法不起作用
使用final来修饰随机数生成器rng，这样确保这个成语变量的引用不会被改变
方法一次只能返回一个值，但此时需要获得x值和y值。使用代码同步块代替。
不在调用其他对象的方法时上加锁

内部类之所以方便和使用的一个原因是：它们可以直接获取所有适当的上下文变量而不需要创界一个额外的类来保存它们
对于无线循环的方法而言，最好的选择是使用Thread.interrupt 
通过InterruptedException一个被中断的线程会自动从下列方法中退出：Object.wait(),Thread.join 和Thread.sleep
调用者通过补货这个异常并采取适当的措施来关闭线程

线程是一个独立于其他线程执行的调用序列，它可以共享底层的系统资源

终止的进程调用start 抛出InvalidThreadStateException异常
没有终止的进程isAlive()返回true
默认Thread.NORM_PRIORITY(5)

Thread 的 t.interrupt方法将状态设置为true，除非是Object.wait,Thread.sleep.or Thread.join正在处理中
或抛出InterruptedException 单t的终端转台会被设置为false
isInterrupted状态不会被设为false
Java的并发编程使用Java语言中相应的构建来完成，并不是系统级构件那样生成新的操作系统进程

对象模型
属性
不变约束
操作
联系
影响操作的前提条件和结束条件
协议

对象模型  
通信 标示 连接 计算

计算
1.接收一个消息
2.更新内部状态
3.发送一个消息
4.创建一个消息

不变约束 一致性

行为不能运行的原因
锁Locking
等待Waiting
输入Input
CPU竞争
失败

永久性或无限制的休眠
死锁 错过唤醒通知 嵌套的显示器互锁 活锁 无CPU资源 资源耗尽 分布式错误

性能
吞吐量 延迟 容量 效率 可扩展性 劣化 锁

几种降低程序执行速度的程序开销和竞争类型
锁 监视器 线程 上下文切换 调度 位置 算法

原子性
包括volatile long 和 volatile double
可见性
1.写线程释放了同步锁，读线程获得了该同步锁
释放的时候强制地把线程使用的工作存储单元的值刷新到主存，获得锁的时候要重新装载可访问成员变量的值
synchronized的第二个含义可以视为一种机制，它使得线程中的方法可以发送或接收另一个线程中方法对数据的修改信息
从这个角度，使用锁和发送消息只是语法不同而已volatile在做下一步存储操作之前，写入这个volatile成员变量的数据在主存中刷新，
读线程每次使用volatile变量之前都要重新读入数据

调用start的线程释放它的锁，而刚刚启动的线程再次获得这个锁
Thread(this).start()，当run方法执行时，对象可能还没有完全被初始化
一个线程结束的时候，所有的写入数据都将被刷新到主存中。
Thread.join 
如果成员变量不是voltile的后者通过或者同步访问的，不要企图通过执行循环等待来等待另一个线程的写入操作
volatile++并不具有原子性
不能保证数组

限制
1.方法限制
尾部调用tail call hand-off
会话
调用者拷贝
接收者拷贝
使用标量参数
2.线程内限制
把一个线程可以访问的所有成员变量都严格限制在这个线程里
3.对象限制
子类化

4.组限制

分解类，降低同步粒度
分解锁
隔离成员变量 Atomic

1.定义一个基本的interface，描述一些不变性的功能
2.作为可选功能，可以定义一个子接口来支持在通常可变的实现类中更新的方法
3.定义一个只读适配器，该适配器值传递接口定义的操作
若果一组包含对象状态的成员变量间需要维护相互的不变约束，那么可以将这些成员变量放在单独的一个对象中
不变表示对象一直维护着合法对象的一致快照。

乐观更新
只有在老状态被获取后且没有被更新的情况下，才能被转换成新的状态